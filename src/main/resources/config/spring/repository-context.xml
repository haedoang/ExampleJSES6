<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"

       xsi:schemaLocation="http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
       					   http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
                          

    	
    	<!-- properties 파일 로딩하기 -->
    	<context:property-placeholder location="classpath:config/db/mybatis/db.properties"/>
    	
    	<!-- 데이터베이스 연결 커넥션 관리 commons dbcp 사용 -->
		
		<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
			
			destroy-method="close"
			p:driverClassName="${jdbc.mysql.driver}"
			p:url="${jdbc.mysql.url}"
			p:username="${jdbc.mysql.username}"
			p:password="${jdbc.mysql.password}"
		/>    	<!-- destroy method .. 객체 메모리 날릴때 close햇 -->
    	
    	<!-- spring mybatis 연결 -->
    	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    		<property name="dataSource" ref="dataSource"/><!-- setDataSource 메소드와 bean 연결.. -->
    		<!-- typeAliases 설정하기... value설정된 package에 있는 class 파일들을 type alias로 지정해준다.  -->
    		<property name="typeAliasesPackage" value="kr.co.haedoang.db.repository.domain"/>
    		
    		<!-- mapper xml 파일과 연결하기. -->
    		<property name="mapperLocations" value="classpath:config/db/sqlmap/*.xml"/>
    		 
    		
    	</bean>
    	
    	<!-- spring에게 Mapper Interface 위치를 알려주고, Interface에 해당하는 구현 객체를 받아야한다.  -->
    	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    		<property name="basePackage" value="kr.co.haedoang.db.repository.mapper"/>
    	</bean>
    	
    	<!-- transaction 처리하기.!!!!! 
    		Exception 발생하면 pointCut에 해당하는 query를 실행하지 않는다.. commit X 
    	-->
    	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    		<property name="dataSource" ref="dataSource"/>
    	</bean>
    	
    	
    	
    	
    	
    	
    	<!-- transaction :::: 어떤 클래스 인지 어떤 메소드 인지 모른다.  -->
    	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    		<tx:attributes>
    			<!--transaction대상이 되는 메소드에 대해 세부사항을 줄 수 있음...-
    				rollback-for 예외 처리를 확장할 수 있다. 기본) SqlException
    			-->
    			<tx:method name="*" rollback-for="Exception"/>
    		</tx:attributes>
    	</tx:advice>
    	
    	<aop:config>
    		<aop:pointcut expression="execution(public * kr.co.haedoang..service.*Impl.*(..))" id="tranPct"/>
    		<!-- aspect는 메소드와 기능을 알아야 사용한데 transaction에서 사용할 수 없음..
    			advisor로 대체. 
    		 -->
    		
    		<aop:advisor advice-ref="txAdvice" pointcut-ref="tranPct"/>
    	</aop:config>
    	
</beans>